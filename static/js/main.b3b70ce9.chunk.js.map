{"version":3,"sources":["Components/Common/Loading.tsx","audio.ts","Components/MainMenu/MainMenu.tsx","index.tsx"],"names":["Loading","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","lib","size","className","React","readAudioStream","res","body","getReader","read","then","result","playAudioStream","blob","Blob","type","url","window","URL","createObjectURL","audio","Audio","src","play","Title","Typography","Text","SERVER_ADDRESS","concat","process","console","log","MainMenu","props","_this","call","handleServerError","e","error","setState","serverState","connect","state","applicationState","undefined","unsupportedLanguageCodes","_this2","fetch","mode","r","text","response","getApplicationState","catch","_this3","json","sortUnsupportedTextToSpeech","_this4","unsupportedLanguages","map","obj","languageCode","local","language","Code","Loading_Loading","renderServerOnline","renderApplicationState","_this5","inputLanguage","input","results","isResultSupported","includes","sortedResults","filter","level","i","Name","SoundOutlined","onClick","playResultSound","translation","App","MainMenu_MainMenu","rootElement","document","getElementById","render","src_App"],"mappings":"yOAKaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEQ,OAAOC,EAAA,cAACC,EAAA,KAAD,CACHC,KAAK,QACLC,UAAU,uBAJtBhB,EAAA,CAA6BiB,aCFhBC,EAAkB,SAAEC,GAE7B,OADeA,EAAIC,KAAMC,YAEpBC,OACAC,KAAK,SAACC,GACH,OAAOA,KAINC,EAAkB,SAAEN,GAC7B,IAAMO,EAAO,IAAIC,KAAK,CAACR,EAAIP,OAAS,CAAEgB,KAAM,cACtCC,EAAMC,OAAOC,IAAIC,gBAAgBN,GACjCO,EAAQ,IAAIC,MAClBD,EAAME,IAAMN,EACZI,EAAMG,iBCfFC,EAAgBC,aAAhBD,MAAOE,EAASD,aAATC,KAOTC,EAAc,WAAAC,OAAcC,oBAAd,KAAAD,OAAiDC,IACrEC,QAAQC,IAAKJ,GAQN,IAAMK,EAAb,SAAA5C,GACI,SAAA4C,EAAaC,GAAe,IAAAC,EAAA,OAAA7C,OAAAC,EAAA,EAAAD,CAAAE,KAAAyC,IACxBE,EAAA7C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2C,GAAAG,KAAA5C,KAAO0C,KAQXG,kBAAoB,SAAEC,GAClBP,QAAQQ,MAAOD,GACfP,QAAQC,IAAK,mBACbG,EAAKK,SAAS,CAAEC,YAAa,aAV7BN,EAAKO,UACLP,EAAKQ,MAAQ,CACTF,YAAa,UACbG,sBAAkBC,EAClBC,8BAA0BD,GANNV,EADhC,OAAA7C,OAAAO,EAAA,EAAAP,CAAA2C,EAAA5C,GAAAC,OAAAQ,EAAA,EAAAR,CAAA2C,EAAA,EAAAlC,IAAA,UAAAC,MAAA,WAec,IAAA+C,EAAAvD,KAENwD,MACIpB,EAAiB,WACjB,CAAEqB,KAAM,SAEPtC,KAAM,SAAAuC,GAAC,OAAIA,EAAEC,SACbxC,KAAM,SAAAyC,GAEe,YAAbA,IACDrB,QAAQC,IAAK,iBACbe,EAAKP,SAAS,CAAEC,YAAa,WAE7BM,EAAKM,yBAGZC,MAAO9D,KAAK6C,qBA/BzB,CAAAtC,IAAA,sBAAAC,MAAA,WAiC0B,IAAAuD,EAAA/D,KAClBwD,MACIpB,EAAiB,SACjB,CAAEqB,KAAM,SAEPtC,KAAM,SAAAuC,GAAC,OAAIA,EAAEM,SACb7C,KAAM,SAAAiC,GACHW,EAAKf,SAAS,CAAEI,qBAChBW,EAAKE,gCAERH,MAAO9D,KAAK6C,qBA3CzB,CAAAtC,IAAA,8BAAAC,MAAA,WA6CkC,IAAA0D,EAAAlE,KAC1BwD,MACIpB,EAAiB,wCACjB,CAAEqB,KAAM,SAEPtC,KAAM,SAAAuC,GAAC,OAAIA,EAAEM,SACb7C,KAAM,SAAEgD,GACL5B,QAAQC,IAAI2B,GACZD,EAAKlB,SAAS,CACVM,yBAA0Ba,EAAqBC,IAAK,SAAAC,GAAG,OAAIA,EAAIC,mBAGtER,MAAO9D,KAAK6C,qBAzDzB,CAAAtC,IAAA,kBAAAC,MAAA,SA2DqBY,GACboC,MACIpB,EAAc,wBAAAC,OAA2BjB,EAAOmD,MAAlC,kBAAAlC,OAAwDjB,EAAOoD,SAASC,OAErFtD,KAAML,GACNK,KAAME,GACNyC,MAAO,SAAAhB,GACJP,QAAQQ,MAAOD,OAlE/B,CAAAvC,IAAA,SAAAC,MAAA,WAwEa,IACGyC,EAAgBjD,KAAKmD,MAArBF,YACR,OAAOxC,EAAA,qBAAKG,UAAU,UACD,YAAhBqC,EACGxC,EAAA,cAACiE,EAAD,MACAjE,EAAA,yBACqB,YAAhBwC,EACGxC,EAAA,cAAC0B,EAAD,2DACAnC,KAAK2E,yBAhF7B,CAAApE,IAAA,qBAAAC,MAAA,WAsFyB,IACT4C,EAAqBpD,KAAKmD,MAA1BC,iBACR,OAAO3C,EAAA,yBACD2C,GAAoBpD,KAAK4E,uBAAwBxB,MAzF/D,CAAA7C,IAAA,yBAAAC,MAAA,SA4F4B4C,GAAqC,IAAAyB,EAAA7E,KACjDsD,EAA6BtD,KAAKmD,MAAlCG,yBACAwB,EAAkC1B,EAAlC0B,cAAeC,EAAmB3B,EAAnB2B,MAAOC,EAAY5B,EAAZ4B,QAExBC,EAAoB,SAAE7D,GAAF,YACOiC,IAA7BC,IACEA,EAAyB4B,SAAU9D,EAAOoD,SAASC,OACnDU,EAAgBH,EAAQI,OAAQH,GACjC5C,OAAQ2C,EAAQI,OAAQ,SAAAhE,GAAM,OAAM6D,EAAmB7D,MAE5D,OAAOX,EAAA,qBAAKG,UAAU,UAClBH,EAAA,cAACwB,EAAD,CAAOoD,MAAO,GAAd,gCACA5E,EAAA,qBAAKG,UAAU,iBACXH,EAAA,cAAC0B,EAAD,CAAMvB,UAAU,gBAAhB,IAAiCmE,EAAjC,MAEHI,EAAcf,IAAI,SAAEhD,EAAQkE,GAAV,OACf7E,EAAA,qBAAKG,UAAU,MAAML,IAAK+E,GACtB7E,EAAA,cAAC0B,EAAD,KAAOf,EAAOoD,SAASe,KAAvB,KACA9E,EAAA,cAAC0B,EAAD,CAAMvB,UAAU,gBAAgBQ,EAAOmD,OACtCU,EAAmB7D,IAAYX,EAAA,cAAC+E,EAAA,EAAD,CAAeC,QAAS,kBAAMZ,EAAKa,gBAAiBtE,MAClF0D,IAAkB1D,EAAOoD,UACvB/D,EAAA,cAAC0B,EAAD,SAAQf,EAAOuE,YAAf,aAjHxBlD,EAAA,CAA8B5B,aCVxB+E,cACF,SAAAA,EAAYlD,GAAc,IAAAC,EAAA,OAAA7C,OAAAC,EAAA,EAAAD,CAAAE,KAAA4F,IACtBjD,EAAA7C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8F,GAAAhD,KAAA5C,KAAM0C,KACDS,MAAQ,GAFSR,wEAKtB,OAAOlC,EAAA,cAACoF,EAAD,aANGhF,aAUZiF,EAAcC,SAASC,eAAe,QAC5CC,iBAAOxF,EAAA,cAACyF,EAAD,MAASJ","file":"static/js/main.b3b70ce9.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Spin } from \"antd/lib\"\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class Loading extends React.Component<Props, State> {\r\n    render() {\r\n        return <Spin\r\n            size=\"large\"\r\n            className=\"absoluteCenter\"\r\n        />\r\n    }\r\n}\r\n","\r\n// https://medium.com/@bitshadow/play-audio-via-react-fetch-post-request-92a901d0bb7f\r\n\r\nexport const readAudioStream = ( res: Response ) => {\r\n    const reader = res.body!.getReader()\r\n    return reader\r\n        .read()\r\n        .then((result) => {\r\n            return result;\r\n        });\r\n}\r\n\r\nexport const playAudioStream = ( res: ReadableStreamReadResult<Uint8Array> ) => {\r\n    const blob = new Blob([res.value!], { type: 'audio/mp3' });\r\n    const url = window.URL.createObjectURL(blob)\r\n    const audio = new Audio();\r\n    audio.src = url;\r\n    audio.play();\r\n}\r\n","import * as React from \"react\";\r\nimport { Button, Layout, Typography, Icon, Input, Affix, Tag } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\nimport { Loading } from '../Common/Loading'\r\nimport { ApplicationState, Result } from \"../../interfaces\";\r\nimport { Flag } from '../Common/Flag'\r\nimport { playAudioStream, readAudioStream } from \"../../audio\";\r\nimport { SoundOutlined } from '@ant-design/icons'\r\n\r\nconst SERVER_ADDRESS = `https://${process.env.REACT_APP_SERVER_IP}:${process.env.REACT_APP_SERVER_PORT}`\r\nconsole.log( SERVER_ADDRESS )\r\n\r\ninterface Props {}\r\ninterface State {\r\n    serverState: 'loading' | 'offline' | 'online',\r\n    applicationState: undefined | ApplicationState,\r\n    unsupportedLanguageCodes: undefined | string[]\r\n}\r\nexport class MainMenu extends React.Component<Props, State> {\r\n    constructor( props: Props ) {\r\n        super( props )\r\n        this.connect()\r\n        this.state = {\r\n            serverState: 'loading',\r\n            applicationState: undefined,\r\n            unsupportedLanguageCodes: undefined\r\n        }\r\n    }\r\n    handleServerError = ( e: Error ) => {\r\n        console.error( e )\r\n        console.log( 'Server offline?' )\r\n        this.setState({ serverState: 'offline' })\r\n    }\r\n    connect() {\r\n        // Check if server is running.\r\n        fetch(\r\n            SERVER_ADDRESS + '/u-there',\r\n            { mode: 'cors' }\r\n        )\r\n            .then( r => r.text() )\r\n            .then( response => {\r\n                // Check expected response.\r\n                if ( response === 'we here' ) {\r\n                    console.log( 'Server online' )\r\n                    this.setState({ serverState: 'online' })\r\n                    // Get active results if any from server.\r\n                    this.getApplicationState()\r\n                }\r\n            } )\r\n            .catch( this.handleServerError )\r\n    }\r\n    getApplicationState() {\r\n        fetch(\r\n            SERVER_ADDRESS + '/state',\r\n            { mode: 'cors' }\r\n        )\r\n            .then( r => r.json() )\r\n            .then( applicationState => {\r\n                this.setState({ applicationState })\r\n                this.sortUnsupportedTextToSpeech()\r\n            } )\r\n            .catch( this.handleServerError )\r\n    }\r\n    sortUnsupportedTextToSpeech() {\r\n        fetch(\r\n            SERVER_ADDRESS + '/unsupported-languages-text-to-speech',\r\n            { mode: 'cors' }\r\n        )\r\n            .then( r => r.json() )\r\n            .then( ( unsupportedLanguages: { languageCode: string }[] ) => {\r\n                console.log(unsupportedLanguages)\r\n                this.setState({\r\n                    unsupportedLanguageCodes: unsupportedLanguages.map( obj => obj.languageCode )\r\n                })\r\n            } )\r\n            .catch( this.handleServerError )\r\n    }\r\n    playResultSound( result: Result ) {\r\n        fetch(\r\n            SERVER_ADDRESS + `/text-to-speech?text=${result.local}&languageCode=${result.language.Code}`\r\n        )\r\n            .then( readAudioStream)\r\n            .then( playAudioStream )\r\n            .catch( e => {\r\n                console.error( e )\r\n            })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { serverState } = this.state\r\n        return <div className='expand'>\r\n            {serverState === 'loading' ?\r\n                <Loading/> :\r\n                <div>\r\n                    {serverState === 'offline' ?\r\n                        <Text>Server is offline... more \"aamuja\" some other time</Text> :\r\n                        this.renderServerOnline()\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    renderServerOnline() {\r\n        const { applicationState } = this.state\r\n        return <div>\r\n            { applicationState && this.renderApplicationState( applicationState ) }\r\n        </div>\r\n    }\r\n    renderApplicationState( applicationState: ApplicationState ) {\r\n        const { unsupportedLanguageCodes } = this.state\r\n        const { inputLanguage, input, results } = applicationState\r\n        // Sort rendered results so that unsupported languages are last.\r\n        const isResultSupported = ( result: Result ): boolean =>\r\n            unsupportedLanguageCodes === undefined ||\r\n            ! unsupportedLanguageCodes.includes( result.language.Code )\r\n        const sortedResults = results.filter( isResultSupported )\r\n            .concat( results.filter( result => ! isResultSupported( result ) ) )\r\n\r\n        return <div className='column'>\r\n            <Title level={3}>Official translations for...</Title>\r\n            <div className='row listStart'>\r\n                <Text className='speechAsText'>\"{input}\"</Text>\r\n            </div>\r\n            {sortedResults.map(( result, i ) =>\r\n                <div className='row' key={i}>\r\n                    <Text>{result.language.Name}:</Text>\r\n                    <Text className='speechAsText'>{result.local}</Text>\r\n                    {isResultSupported( result ) && <SoundOutlined onClick={() => this.playResultSound( result )} />}\r\n                    { inputLanguage === result.language &&\r\n                        <Text>({result.translation})</Text>\r\n                    }\r\n                </div>\r\n            )}\r\n        </div>\r\n    }\r\n}","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\nimport \"./styles.css\";\nimport { MainMenu } from './Components/MainMenu/MainMenu'\n\ninterface Props {}\ninterface State {}\nclass App extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {}\n    }\n    render() {\n        return <MainMenu/>\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}
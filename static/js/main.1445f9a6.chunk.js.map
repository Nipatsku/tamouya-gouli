{"version":3,"sources":["Components/Common/Loading.tsx","audio.ts","Components/MainMenu/MainMenu.tsx","index.tsx"],"names":["Loading","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","lib","size","className","React","readAudioStream","res","body","getReader","read","then","result","playAudioStream","blob","Blob","type","url","window","URL","createObjectURL","audio","Audio","src","play","Title","Typography","Text","SERVER_ADDRESS","concat","process","REACT_APP_SERVER_PORT","console","log","MainMenu","props","_this","call","refSoumah","handleServerError","e","error","setState","serverState","connect","state","applicationState","undefined","unsupportedLanguageCodes","_this2","fetch","mode","r","text","response","getApplicationState","catch","_this3","json","sortUnsupportedTextToSpeech","_this4","unsupportedLanguages","map","obj","languageCode","local","language","Code","_this5","tStart","performance","now","animate","soumah","current","t","rotateY","Math","sin","rotateZ","scale","translateX","translateY","abs","transform","style","requestAnimationFrame","ref","Loading_Loading","renderServerOnline","renderApplicationState","_this6","inputLanguage","input","results","isResultSupported","includes","sortedResults","filter","level","i","Name","SoundOutlined","onClick","playResultSound","translation","App","MainMenu_MainMenu","rootElement","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.1445f9a6.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Spin } from \"antd/lib\"\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class Loading extends React.Component<Props, State> {\r\n    render() {\r\n        return <Spin\r\n            size=\"large\"\r\n            className=\"absoluteCenter\"\r\n        />\r\n    }\r\n}\r\n","\r\n// https://medium.com/@bitshadow/play-audio-via-react-fetch-post-request-92a901d0bb7f\r\n\r\nexport const readAudioStream = ( res: Response ) => {\r\n    const reader = res.body!.getReader()\r\n    return reader\r\n        .read()\r\n        .then((result) => {\r\n            return result;\r\n        });\r\n}\r\n\r\nexport const playAudioStream = ( res: ReadableStreamReadResult<Uint8Array> ) => {\r\n    const blob = new Blob([res.value!], { type: 'audio/mp3' });\r\n    const url = window.URL.createObjectURL(blob)\r\n    const audio = new Audio();\r\n    audio.src = url;\r\n    audio.play();\r\n}\r\n","import * as React from \"react\";\r\nimport { Button, Layout, Typography, Icon, Input, Affix, Tag } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\nimport { Loading } from '../Common/Loading'\r\nimport { ApplicationState, Result } from \"../../interfaces\";\r\nimport { Flag } from '../Common/Flag'\r\nimport { playAudioStream, readAudioStream } from \"../../audio\";\r\nimport { SoundOutlined } from '@ant-design/icons'\r\n\r\nconst SERVER_ADDRESS = `https://${process.env.REACT_APP_SERVER_IP}:${process.env.REACT_APP_SERVER_PORT}`\r\nconsole.log( SERVER_ADDRESS )\r\n\r\ninterface Props {}\r\ninterface State {\r\n    serverState: 'loading' | 'offline' | 'online',\r\n    applicationState: undefined | ApplicationState,\r\n    unsupportedLanguageCodes: undefined | string[]\r\n}\r\nexport class MainMenu extends React.Component<Props, State> {\r\n    refSoumah: React.RefObject<HTMLImageElement>\r\n    constructor( props: Props ) {\r\n        super( props )\r\n        this.connect()\r\n        this.refSoumah = React.createRef()\r\n        this.state = {\r\n            serverState: 'loading',\r\n            applicationState: undefined,\r\n            unsupportedLanguageCodes: undefined\r\n        }\r\n    }\r\n    handleServerError = ( e: Error ) => {\r\n        console.error( e )\r\n        console.log( 'Server offline?' )\r\n        this.setState({ serverState: 'offline' })\r\n    }\r\n    connect() {\r\n        // Check if server is running.\r\n        fetch(\r\n            SERVER_ADDRESS + '/u-there',\r\n            { mode: 'cors' }\r\n        )\r\n            .then( r => r.text() )\r\n            .then( response => {\r\n                // Check expected response.\r\n                if ( response === 'we here' ) {\r\n                    console.log( 'Server online' )\r\n                    this.setState({ serverState: 'online' })\r\n                    // Get active results if any from server.\r\n                    this.getApplicationState()\r\n                }\r\n            } )\r\n            .catch( this.handleServerError )\r\n    }\r\n    getApplicationState() {\r\n        fetch(\r\n            SERVER_ADDRESS + '/state',\r\n            { mode: 'cors' }\r\n        )\r\n            .then( r => r.json() )\r\n            .then( applicationState => {\r\n                this.setState({ applicationState })\r\n                this.sortUnsupportedTextToSpeech()\r\n            } )\r\n            .catch( this.handleServerError )\r\n    }\r\n    sortUnsupportedTextToSpeech() {\r\n        fetch(\r\n            SERVER_ADDRESS + '/unsupported-languages-text-to-speech',\r\n            { mode: 'cors' }\r\n        )\r\n            .then( r => r.json() )\r\n            .then( ( unsupportedLanguages: { languageCode: string }[] ) => {\r\n                console.log(unsupportedLanguages)\r\n                this.setState({\r\n                    unsupportedLanguageCodes: unsupportedLanguages.map( obj => obj.languageCode )\r\n                })\r\n            } )\r\n            .catch( this.handleServerError )\r\n    }\r\n    playResultSound( result: Result ) {\r\n        fetch(\r\n            SERVER_ADDRESS + `/text-to-speech?text=${result.local}&languageCode=${result.language.Code}`\r\n        )\r\n            .then( readAudioStream)\r\n            .then( playAudioStream )\r\n            .catch( e => {\r\n                console.error( e )\r\n            })\r\n    }\r\n    componentDidMount() {\r\n        // MLG animations.\r\n        const animate = ( ) => {\r\n            const soumah = this.refSoumah.current\r\n            if ( soumah ) {\r\n                const t = 2.0 * (window.performance.now( ) - tStart) / 1000\r\n\r\n                let rotateX: number = 0\r\n                let rotateY: number = -Math.sin( t ) * 25\r\n                let rotateZ: number = -10 + Math.sin( t ) * 5\r\n                let skewX: number = 0\r\n                let skewY: number = 0\r\n                let scale: number = 1 + Math.sin( t * 2 ) * .15\r\n                let translateX: number = -100 + Math.sin( t ) * 150\r\n                let translateY: number = 40 + Math.abs( Math.sin( t ) ) * 100\r\n\r\n                let transform = ``\r\n                transform += `translateX(${translateX}px) translateY(${translateY}px) `\r\n                transform += `rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg) ` \r\n                transform += `skewX(${skewX}deg) skewY(${skewY}deg) `\r\n                transform += `scaleX(${scale}) scaleY(${scale}) `\r\n                soumah.style.transform = transform\r\n                requestAnimationFrame( animate )\r\n            }\r\n        }\r\n        const tStart = window.performance.now()\r\n        animate()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { serverState } = this.state\r\n        return <div className='expand'>\r\n            <div className='backgroundDiv'>\r\n                <img\r\n                    className='background'\r\n                    src='wandelsoumah_bg.png'\r\n                />\r\n                <img\r\n                    className='soumah'\r\n                    src='wandelsoumah_avatar.png'\r\n                    ref={ this.refSoumah }\r\n                />\r\n            </div>\r\n            {serverState === 'loading' ?\r\n                <Loading/> :\r\n                <div>\r\n                    {serverState === 'offline' ?\r\n                        <Text>Server is offline... more \"aamuja\" some other time</Text> :\r\n                        this.renderServerOnline()\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    renderServerOnline() {\r\n        const { applicationState } = this.state\r\n        return <div>\r\n            { applicationState && this.renderApplicationState( applicationState ) }\r\n        </div>\r\n    }\r\n    renderApplicationState( applicationState: ApplicationState ) {\r\n        const { unsupportedLanguageCodes } = this.state\r\n        const { inputLanguage, input, results } = applicationState\r\n        // Sort rendered results so that unsupported languages are last.\r\n        const isResultSupported = ( result: Result ): boolean =>\r\n            unsupportedLanguageCodes === undefined ||\r\n            ! unsupportedLanguageCodes.includes( result.language.Code )\r\n        const sortedResults = results.filter( isResultSupported )\r\n            .concat( results.filter( result => ! isResultSupported( result ) ) )\r\n\r\n        return <div className='column'>\r\n            <Title level={3}>Official translations for...</Title>\r\n            <div className='row listStart'>\r\n                <Text className='speechAsText'>\"{input}\"</Text>\r\n            </div>\r\n            {sortedResults.map(( result, i ) =>\r\n                <div className='row' key={i}>\r\n                    <Text>{result.language.Name}:</Text>\r\n                    <Text className='speechAsText'>{result.local}</Text>\r\n                    {isResultSupported( result ) && <SoundOutlined onClick={() => this.playResultSound( result )} />}\r\n                    { inputLanguage === result.language &&\r\n                        <Text>({result.translation})</Text>\r\n                    }\r\n                </div>\r\n            )}\r\n        </div>\r\n    }\r\n}","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\nimport \"./styles.css\";\nimport { MainMenu } from './Components/MainMenu/MainMenu'\n\ninterface Props {}\ninterface State {}\nclass App extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {}\n    }\n    render() {\n        return <MainMenu/>\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}
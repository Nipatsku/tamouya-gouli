{"version":3,"sources":["Components/Common/Loading.tsx","audio.ts","Components/MainMenu/MainMenu.tsx","index.tsx"],"names":["Loading","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","lib","size","className","React","readAudioStream","res","body","getReader","read","then","result","playAudioStream","blob","Blob","type","url","window","URL","createObjectURL","audio","Audio","src","play","Title","Typography","Text","SERVER_ADDRESS","concat","process","REACT_APP_SERVER_PORT","console","log","MainMenu","props","_this","call","handleServerError","e","error","setState","serverState","connect","state","applicationState","undefined","unsupportedLanguageCodes","_this2","fetch","mode","r","text","response","getApplicationState","catch","_this3","json","sortUnsupportedTextToSpeech","_this4","unsupportedLanguages","map","obj","languageCode","local","language","Code","Loading_Loading","renderServerOnline","renderApplicationState","_this5","inputLanguage","input","results","isResultSupported","includes","sortedResults","filter","level","i","Name","SoundOutlined","onClick","playResultSound","translation","App","MainMenu_MainMenu","rootElement","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.64e49951.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Spin } from \"antd/lib\"\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class Loading extends React.Component<Props, State> {\r\n    render() {\r\n        return <Spin\r\n            size=\"large\"\r\n            className=\"absoluteCenter\"\r\n        />\r\n    }\r\n}\r\n","\r\n// https://medium.com/@bitshadow/play-audio-via-react-fetch-post-request-92a901d0bb7f\r\n\r\nexport const readAudioStream = ( res: Response ) => {\r\n    const reader = res.body!.getReader()\r\n    return reader\r\n        .read()\r\n        .then((result) => {\r\n            return result;\r\n        });\r\n}\r\n\r\nexport const playAudioStream = ( res: ReadableStreamReadResult<Uint8Array> ) => {\r\n    const blob = new Blob([res.value!], { type: 'audio/mp3' });\r\n    const url = window.URL.createObjectURL(blob)\r\n    const audio = new Audio();\r\n    audio.src = url;\r\n    audio.play();\r\n}\r\n","import * as React from \"react\";\r\nimport { Button, Layout, Typography, Icon, Input, Affix, Tag } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\nimport { Loading } from '../Common/Loading'\r\nimport { ApplicationState, Result } from \"../../interfaces\";\r\nimport { Flag } from '../Common/Flag'\r\nimport { playAudioStream, readAudioStream } from \"../../audio\";\r\nimport { SoundOutlined } from '@ant-design/icons'\r\n\r\nconst SERVER_ADDRESS = `https://${process.env.REACT_APP_SERVER_IP}:${process.env.REACT_APP_SERVER_PORT}`\r\nconsole.log( SERVER_ADDRESS )\r\n\r\ninterface Props {}\r\ninterface State {\r\n    serverState: 'loading' | 'offline' | 'online',\r\n    applicationState: undefined | ApplicationState,\r\n    unsupportedLanguageCodes: undefined | string[]\r\n}\r\nexport class MainMenu extends React.Component<Props, State> {\r\n    constructor( props: Props ) {\r\n        super( props )\r\n        this.connect()\r\n        this.state = {\r\n            serverState: 'loading',\r\n            applicationState: undefined,\r\n            unsupportedLanguageCodes: undefined\r\n        }\r\n    }\r\n    handleServerError = ( e: Error ) => {\r\n        console.error( e )\r\n        console.log( 'Server offline?' )\r\n        this.setState({ serverState: 'offline' })\r\n    }\r\n    connect() {\r\n        // Check if server is running.\r\n        fetch(\r\n            SERVER_ADDRESS + '/u-there',\r\n            { mode: 'cors' }\r\n        )\r\n            .then( r => r.text() )\r\n            .then( response => {\r\n                // Check expected response.\r\n                if ( response === 'we here' ) {\r\n                    console.log( 'Server online' )\r\n                    this.setState({ serverState: 'online' })\r\n                    // Get active results if any from server.\r\n                    this.getApplicationState()\r\n                }\r\n            } )\r\n            .catch( this.handleServerError )\r\n    }\r\n    getApplicationState() {\r\n        fetch(\r\n            SERVER_ADDRESS + '/state',\r\n            { mode: 'cors' }\r\n        )\r\n            .then( r => r.json() )\r\n            .then( applicationState => {\r\n                this.setState({ applicationState })\r\n                this.sortUnsupportedTextToSpeech()\r\n            } )\r\n            .catch( this.handleServerError )\r\n    }\r\n    sortUnsupportedTextToSpeech() {\r\n        fetch(\r\n            SERVER_ADDRESS + '/unsupported-languages-text-to-speech',\r\n            { mode: 'cors' }\r\n        )\r\n            .then( r => r.json() )\r\n            .then( ( unsupportedLanguages: { languageCode: string }[] ) => {\r\n                console.log(unsupportedLanguages)\r\n                this.setState({\r\n                    unsupportedLanguageCodes: unsupportedLanguages.map( obj => obj.languageCode )\r\n                })\r\n            } )\r\n            .catch( this.handleServerError )\r\n    }\r\n    playResultSound( result: Result ) {\r\n        fetch(\r\n            SERVER_ADDRESS + `/text-to-speech?text=${result.local}&languageCode=${result.language.Code}`\r\n        )\r\n            .then( readAudioStream)\r\n            .then( playAudioStream )\r\n            .catch( e => {\r\n                console.error( e )\r\n            })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { serverState } = this.state\r\n        return <div className='expand'>\r\n            <div className='backgroundDiv'>\r\n                <img\r\n                    className='background'\r\n                    src='https://f4.bcbits.com/img/0012867325_10.jpg'\r\n                />\r\n            </div>\r\n            {serverState === 'loading' ?\r\n                <Loading/> :\r\n                <div>\r\n                    {serverState === 'offline' ?\r\n                        <Text>Server is offline... more \"aamuja\" some other time</Text> :\r\n                        this.renderServerOnline()\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n    renderServerOnline() {\r\n        const { applicationState } = this.state\r\n        return <div>\r\n            { applicationState && this.renderApplicationState( applicationState ) }\r\n        </div>\r\n    }\r\n    renderApplicationState( applicationState: ApplicationState ) {\r\n        const { unsupportedLanguageCodes } = this.state\r\n        const { inputLanguage, input, results } = applicationState\r\n        // Sort rendered results so that unsupported languages are last.\r\n        const isResultSupported = ( result: Result ): boolean =>\r\n            unsupportedLanguageCodes === undefined ||\r\n            ! unsupportedLanguageCodes.includes( result.language.Code )\r\n        const sortedResults = results.filter( isResultSupported )\r\n            .concat( results.filter( result => ! isResultSupported( result ) ) )\r\n\r\n        return <div className='column'>\r\n            <Title level={3}>Official translations for...</Title>\r\n            <div className='row listStart'>\r\n                <Text className='speechAsText'>\"{input}\"</Text>\r\n            </div>\r\n            {sortedResults.map(( result, i ) =>\r\n                <div className='row' key={i}>\r\n                    <Text>{result.language.Name}:</Text>\r\n                    <Text className='speechAsText'>{result.local}</Text>\r\n                    {isResultSupported( result ) && <SoundOutlined onClick={() => this.playResultSound( result )} />}\r\n                    { inputLanguage === result.language &&\r\n                        <Text>({result.translation})</Text>\r\n                    }\r\n                </div>\r\n            )}\r\n        </div>\r\n    }\r\n}","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\nimport \"./styles.css\";\nimport { MainMenu } from './Components/MainMenu/MainMenu'\n\ninterface Props {}\ninterface State {}\nclass App extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {}\n    }\n    render() {\n        return <MainMenu/>\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}